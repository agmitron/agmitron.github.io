{"version":3,"file":"tbank.js","sources":["../../../src/tbank/tbank.ts"],"sourcesContent":["import { Importer, Result, Definition } from \"bankascanner/importer\";\nimport { Failure, Operation, Outcome } from \"bankascanner\";\nimport { Either, left, right } from \"bankascanner/lib\";\nimport { pdf2text } from \"../pdf2text\";\n\nconst parseDate = (s: string): Either<string, Date> => {\n  const [d, m, y] = s.split(\".\");\n  const date = new Date(`${y}-${m}-${d}`);\n  return isNaN(date.getTime()) ? left(`failed to parse ${s}`) : right(date);\n};\n\nconst rowRegex =\n  /(\\d{2}\\.\\d{2}\\.\\d{4}) \\d{2}:\\d{2} (\\d{2}\\.\\d{2}\\.\\d{4}) \\d{2}:\\d{2} ([+-]\\d[\\d\\s]*\\.\\d{2})\\s+([^\\d\\s])\\s+([+-]\\d[\\d\\s]*\\.\\d{2})\\s+([^\\d\\s])\\s+(.+?)(?:\\s(\\d{4}))?(?= \\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2}|$)/g;\n\nconst currencyMap: Record<string, string> = {\n  \"₽\": \"RUB\",\n  \"$\": \"USD\",\n  \"€\": \"EUR\",\n};\n\nconst header =\n  \"Date and time of the transaction Date of processing of the transaction Transaction amount and its currency Transaction amount in the card currency Transaction description   Card number \";\n\nconst categories: Record<string, RegExp> = {\n  \"internal transfer\": /internal transfer/i,\n  \"intrabank transfer\": /intrabank transfer/i,\n  \"external transfer\": /external transfer/i,\n  \"replenishment\": /replenishment/i,\n  \"bank service payment\": /bank service payment/i,\n};\n\nconst detectCategory = (comment: string): string => {\n  for (const [category, regex] of Object.entries(categories)) {\n    if (regex.test(comment)) {\n      return category;\n    }\n  }\n  return \"other\";\n};\n\nconst importer: Importer = async (file: Uint8Array): Promise<Result> => {\n  const text = await pdf2text(new Uint8Array(file));\n\n  let content = text.split(header).slice(1).join(\" \");\n  const summaryIdx = content.indexOf(\" 66 736,00\");\n  if (summaryIdx !== -1) {\n    content = content.slice(0, summaryIdx);\n  }\n  content = content.trim();\n\n  const outcomes: Outcome[] = [];\n  let match: RegExpExecArray | null;\n  while ((match = rowRegex.exec(content))) {\n    const [, dateRaw, , , , amountRaw, currencySymbol, descriptionRaw] = match;\n\n    const date = parseDate(dateRaw);\n    const amount = parseFloat(amountRaw.replace(/\\s/g, \"\"));\n    const comment = descriptionRaw.trim();\n    const category = detectCategory(comment);\n    const currency = currencyMap[currencySymbol] ?? currencySymbol;\n\n    if (date.isLeft() || isNaN(amount)) {\n      const failure: Failure = { message: \"failed to parse row: \" + match[0] };\n      outcomes.push(left(failure));\n      continue;\n    }\n\n    const operation: Operation = {\n      date: date.value,\n      category,\n      comment,\n      value: amount,\n      currency,\n    };\n\n    outcomes.push(right(operation));\n  }\n\n  return right(outcomes);\n};\n\nconst definition: Definition = {\n  name: \"tbank\",\n  version: \"latest\",\n  run: importer,\n};\n\nexport default definition;\n"],"names":["parseDate","s","d","m","y","date","left","right","rowRegex","currencyMap","header","categories","detectCategory","comment","category","regex","importer","file","content","pdf2text","summaryIdx","outcomes","match","dateRaw","amountRaw","currencySymbol","descriptionRaw","amount","currency","failure","operation","definition"],"mappings":";;AAKA,MAAMA,IAAY,CAACC,MAAoC;AACrD,QAAM,CAACC,GAAGC,GAAGC,CAAC,IAAIH,EAAE,MAAM,GAAG,GACvBI,wBAAW,KAAK,GAAGD,CAAC,IAAID,CAAC,IAAID,CAAC,EAAE;AACtC,SAAO,MAAMG,EAAK,QAAA,CAAS,IAAIC,EAAAA,KAAK,mBAAmBL,CAAC,EAAE,IAAIM,EAAAA,MAAMF,CAAI;AAC1E,GAEMG,IACJ,4MAEIC,IAAsC;AAAA,EAC1C,KAAK;AAAA,EACL,GAAK;AAAA,EACL,KAAK;AACP,GAEMC,IACJ,6LAEIC,IAAqC;AAAA,EACzC,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,qBAAqB;AAAA,EACrB,eAAiB;AAAA,EACjB,wBAAwB;AAC1B,GAEMC,IAAiB,CAACC,MAA4B;AAClD,aAAW,CAACC,GAAUC,CAAK,KAAK,OAAO,QAAQJ,CAAU;AACvD,QAAII,EAAM,KAAKF,CAAO;AACpB,aAAOC;AAGX,SAAO;AACT,GAEME,IAAqB,OAAOC,MAAsC;AAGtE,MAAIC,KAFS,MAAMC,EAAS,IAAI,WAAWF,CAAI,CAAC,GAE7B,MAAMP,CAAM,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAClD,QAAMU,IAAaF,EAAQ,QAAQ,YAAY;AAC/C,EAAIE,MAAe,OACjBF,IAAUA,EAAQ,MAAM,GAAGE,CAAU,IAEvCF,IAAUA,EAAQ,KAAA;AAElB,QAAMG,IAAsB,CAAA;AAC5B,MAAIC;AACJ,SAAQA,IAAQd,EAAS,KAAKU,CAAO,KAAI;AACvC,UAAM,CAAA,EAAGK,GAAA,EAAA,EAAA,EAAeC,GAAWC,GAAgBC,CAAc,IAAIJ,GAE/DjB,IAAOL,EAAUuB,CAAO,GACxBI,IAAS,WAAWH,EAAU,QAAQ,OAAO,EAAE,CAAC,GAChDX,IAAUa,EAAe,KAAA,GACzBZ,IAAWF,EAAeC,CAAO,GACjCe,IAAWnB,EAAYgB,CAAc,KAAKA;AAEhD,QAAIpB,EAAK,OAAA,KAAY,MAAMsB,CAAM,GAAG;AAClC,YAAME,IAAmB,EAAE,SAAS,0BAA0BP,EAAM,CAAC,EAAA;AACrE,MAAAD,EAAS,KAAKf,OAAKuB,CAAO,CAAC;AAC3B;AAAA,IACF;AAEA,UAAMC,IAAuB;AAAA,MAC3B,MAAMzB,EAAK;AAAA,MACX,UAAAS;AAAA,MACA,SAAAD;AAAA,MACA,OAAOc;AAAA,MACP,UAAAC;AAAA,IAAA;AAGF,IAAAP,EAAS,KAAKd,QAAMuB,CAAS,CAAC;AAAA,EAChC;AAEA,SAAOvB,EAAAA,MAAMc,CAAQ;AACvB,GAEMU,IAAyB;AAAA,EAC7B,MAAM;AAAA,EACN,SAAS;AAAA,EACT,KAAKf;AACP;"}