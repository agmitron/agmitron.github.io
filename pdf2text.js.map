{"version":3,"file":"pdf2text.js","sources":["../../src/pdf2text.ts"],"sourcesContent":["// pdf2text.ts - Функция для извлечения текста из PDF (на основе официального примера)\nimport { getDocument, GlobalWorkerOptions, version } from \"pdfjs-dist/legacy/build/pdf.mjs\";\nimport worker from \"pdfjs-dist/legacy/build/pdf.worker.mjs?worker\";\n\nimport { TextItem } from \"pdfjs-dist/types/src/display/api\";\n\nGlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${version}/pdf.worker.js`;\n\n(window as any).pdfjsWorker = worker\n\n/**\n * Извлекает текст из PDF файла\n * @param file - Массив байтов PDF файла\n * @returns Извлеченный текст\n */\nexport async function pdf2text(file: Uint8Array): Promise<string> {\n  try {\n    // Загружаем PDF документ из Uint8Array\n    const loadingTask = getDocument({ data: file });\n    const doc = await loadingTask.promise;\n\n    const numPages = doc.numPages;\n    console.log(`Найдено страниц: ${numPages}`);\n\n    let fullText = \"\";\n\n    // Обрабатываем страницы последовательно\n    for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n      try {\n        const page = await doc.getPage(pageNum);\n        const textContent = await page.getTextContent();\n\n        // Извлекаем текст из элементов страницы\n        const strings = textContent.items\n          .filter((item): item is TextItem => \"str\" in item)\n          .map((item) => item.str);\n\n        const pageText = strings.join(\" \");\n\n        if (pageText.trim()) {\n          fullText += pageText + \"\\n\\n\";\n          console.log(\n            `Страница ${pageNum}: извлечено ${pageText.length} символов`,\n          );\n        }\n\n        // Освобождаем ресурсы страницы\n        page.cleanup();\n      } catch (pageError: any) {\n        console.warn(\n          `Предупреждение: не удалось обработать страницу ${pageNum}: ${pageError.message}`,\n        );\n      }\n    }\n\n    const result = fullText.trim();\n    console.log(`Всего извлечено символов: ${result.length}`);\n\n    return result;\n  } catch (error: any) {\n    throw new Error(`Ошибка при обработке PDF: ${error.message}`);\n  }\n}\n"],"names":["GlobalWorkerOptions","version","worker","pdf2text","file","doc","getDocument","numPages","fullText","pageNum","page","pageText","item","pageError","result","error"],"mappings":";;;;;;;;;AAMAA,EAAoB,YAAY,iDAAiDC,CAAO;AAEvF,OAAe,cAAcC;AAO9B,eAAsBC,EAASC,GAAmC;AAChE,MAAI;AAGF,UAAMC,IAAM,MADQC,EAAY,EAAE,MAAMF,GAAM,EAChB,SAExBG,IAAWF,EAAI;AACrB,YAAQ,IAAI,oBAAoBE,CAAQ,EAAE;AAE1C,QAAIC,IAAW;AAGf,aAASC,IAAU,GAAGA,KAAWF,GAAUE;AACzC,UAAI;AACF,cAAMC,IAAO,MAAML,EAAI,QAAQI,CAAO,GAQhCE,KAPc,MAAMD,EAAK,eAAA,GAGH,MACzB,OAAO,CAACE,MAA2B,SAASA,CAAI,EAChD,IAAI,CAACA,MAASA,EAAK,GAAG,EAEA,KAAK,GAAG;AAEjC,QAAID,EAAS,WACXH,KAAYG,IAAW;AAAA;AAAA,GACvB,QAAQ;AAAA,UACN,YAAYF,CAAO,eAAeE,EAAS,MAAM;AAAA,QAAA,IAKrDD,EAAK,QAAA;AAAA,MACP,SAASG,GAAgB;AACvB,gBAAQ;AAAA,UACN,kDAAkDJ,CAAO,KAAKI,EAAU,OAAO;AAAA,QAAA;AAAA,MAEnF;AAGF,UAAMC,IAASN,EAAS,KAAA;AACxB,mBAAQ,IAAI,6BAA6BM,EAAO,MAAM,EAAE,GAEjDA;AAAA,EACT,SAASC,GAAY;AACnB,UAAM,IAAI,MAAM,6BAA6BA,EAAM,OAAO,EAAE;AAAA,EAC9D;AACF;"}