{"version":3,"file":"alatau.js","sources":["../../../src/alatau_city_bank/alatau.ts"],"sourcesContent":["import { Importer, Result, Definition } from \"bankascanner/importer\";\nimport { Outcome, Operation } from \"bankascanner\";\nimport { left, right } from \"bankascanner/lib\";\nimport { getDocument } from \"pdfjs-dist/legacy/build/pdf.mjs\";\n\ninterface Tx {\n  date: string;\n  category: string;\n  comment: string;\n  amount: string;\n  transCur: string;\n  income: string;\n  expense: string;\n  currency: string;\n}\n\nconst cleanNumber = (s: string) =>\n  s.replace(/(?<!\\d)(\\d{1,3}(?: \\d{3})+(?:\\.\\d+)?)(?!\\d)/g, (m) =>\n    m.replace(/ /g, \"\"),\n  );\n\nconst importer: Importer = async (file: Uint8Array): Promise<Result> => {\n  try {\n    const data = new Uint8Array(file);\n    const doc = await getDocument({ data }).promise;\n    const rawLines: string[] = [];\n\n    for (let p = 1; p <= doc.numPages; p++) {\n      const page = await doc.getPage(p);\n      const tc = await page.getTextContent();\n      const items = tc.items\n        .filter((i): i is any => \"str\" in i)\n        .map((i) => ({\n          str: i.str as string,\n          x: i.transform[4],\n          y: i.transform[5],\n        }));\n\n      const map = new Map<number, { str: string; x: number }[]>();\n      for (const it of items) {\n        const y = Math.round(it.y);\n        const arr = map.get(y) ?? [];\n        arr.push(it);\n        map.set(y, arr);\n      }\n\n      const pageLines = [...map.entries()]\n        .sort((a, b) => b[0] - a[0])\n        .map(([_, arr]) =>\n          arr\n            .sort((a, b) => a.x - b.x)\n            .map((it) => it.str)\n            .join(\" \")\n            .trim(),\n        );\n      rawLines.push(...pageLines);\n    }\n\n    const lines = rawLines.map(cleanNumber);\n    const dateLine =\n      /^(\\d{2}\\.\\d{2}\\.\\d{4})\\s+(\\w+)\\s+(.*)\\s+(\\d+(?:\\.\\d+)?)\\s+([A-Z]{3})\\s+(\\d+(?:\\.\\d+)?)\\s+(\\d+(?:\\.\\d+)?)/;\n    const accRegex = /^KZ[0-9A-Z]+\\s+([A-Z]{3})$/;\n\n    let currentCurrency: string | null = null;\n    let pending: Tx | null = null;\n    const transactions: Tx[] = [];\n    const push = () => {\n      if (pending) {\n        transactions.push(pending);\n        pending = null;\n      }\n    };\n\n    const headerRe =\n      /^(Transaction\\s+Income in account\\s+Expense in|Date\\s+Operation|Details\\s+Amount|currency\\s+currency\\s+account currency)/;\n\n    for (const raw of lines) {\n      const line = raw.trim();\n      if (headerRe.test(line)) continue;\n      const accMatch = accRegex.exec(line);\n      if (accMatch) {\n        push();\n        currentCurrency = accMatch[1];\n        continue;\n      }\n      if (!currentCurrency) continue;\n\n      const m = dateLine.exec(line);\n      if (m) {\n        push();\n        const [, date, category, merchant, amount, transCur, income, expense] =\n          m;\n        pending = {\n          date,\n          category,\n          comment: merchant.trim(),\n          amount,\n          transCur,\n          income,\n          expense,\n          currency: currentCurrency,\n        };\n        continue;\n      }\n\n      if (pending) {\n        if (/^Account transactions/.test(line)) {\n          push();\n          currentCurrency = null;\n        } else {\n          pending.comment += \" \" + line;\n        }\n      }\n    }\n    push();\n\n    const deduped: Tx[] = [];\n    for (let i = 0; i < transactions.length; i++) {\n      let t = transactions[i];\n      const next = transactions[i + 1];\n      if (\n        next &&\n        t.date === next.date &&\n        t.category === next.category &&\n        t.comment === next.comment &&\n        t.currency === next.currency &&\n        t.amount === next.amount &&\n        ((parseFloat(t.income) > 0 && parseFloat(next.expense) > 0) ||\n          (parseFloat(t.expense) > 0 && parseFloat(next.income) > 0))\n      ) {\n        const incomeSum = parseFloat(t.income) + parseFloat(next.income);\n        const expenseSum = parseFloat(t.expense) + parseFloat(next.expense);\n        t = {\n          ...t,\n          income: expenseSum > 0 ? \"0\" : incomeSum.toString(),\n          expense: expenseSum > 0 ? expenseSum.toString() : \"0\",\n        };\n        i++;\n      }\n      deduped.push(t);\n    }\n\n    const outcomes: Outcome[] = [];\n    for (const tx of deduped) {\n      const [d, mo, y] = tx.date.split(\".\");\n      const income = parseFloat(tx.income);\n      const expense = parseFloat(tx.expense);\n      const value = parseFloat((income - expense).toFixed(2));\n      const op: Operation = {\n        date: new Date(`${y}-${mo}-${d}`),\n        category: tx.category,\n        comment: tx.comment.trim(),\n        value,\n        currency: tx.currency,\n      };\n      outcomes.push(right(op));\n    }\n\n    return right(outcomes);\n  } catch (e: any) {\n    return left(`failed to parse pdf: ${e.message}`);\n  }\n};\n\nconst definition: Definition = {\n  name: \"Alatau City Bank\",\n  version: \"latest\",\n  run: importer,\n};\n\nexport default definition;\n"],"names":["cleanNumber","s","importer","file","data","doc","getDocument","rawLines","p","items","i","map","it","y","arr","pageLines","a","b","_","lines","dateLine","accRegex","currentCurrency","pending","transactions","push","headerRe","raw","line","accMatch","m","date","category","merchant","amount","transCur","income","expense","deduped","t","next","incomeSum","expenseSum","outcomes","tx","d","mo","value","op","right","e","left","definition"],"mappings":"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"}